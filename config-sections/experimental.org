#+TITLE: Experimental

* =corfu and co.=
#+begin_src emacs-lisp :results none
(use-package corfu-doc
  :config
  (setq corfu-doc-delay 0.2
        corfu-doc-max-width 80
        corfu-doc-max-height 40))

(use-package corfu
  :config
  (setq corfu-cycle t
        corfu-auto t
        corfu-auto-prefix 1
        corfu-auto-delay 0.01
        corfu-separator ?\s
        corfu-quit-at-boundary nil
        corfu-quit-no-match t
        corfu-preview-current nil
        corfu-preselect-first t
        corfu-on-exact-match nil
        corfu-echo-documentation t
        corfu-scroll-margin 10)
  (map! :map global-map
        :nvi "C-SPC" #'completion-at-point)
  (map! :map corfu-map
        "C-j" #'corfu-next
        "C-k" #'corfu-previous
        "C-l" #'corfu-insert
        "C-;" #'corfu-doc-toggle
        "TAB" #'corfu-insert
        "<tab>" #'corfu-insert
        "ESC" #'corfu-reset)
  (add-hook! '(prog-mode-hook
                text-mode-hook)
    (corfu-mode +1)
    (corfu-doc-mode +1)
    (unless (display-graphic-p)
      (corfu-terminal-mode +1)
      (corfu-doc-terminal-mode +1))
    (company-mode -1))
  (add-hook! '(clojure-mode-hook
                clojurescript-mode-hook
                clojurec-mode-hook
                css-mode-hook
                scss-mode-hook
                sass-mode-hook
                less-css-mode-hook)
    (corfu-mode -1)
    (company-mode +1)))

(use-package kind-icon
  :ensure t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

;; Optionally use the `orderless' completion style. See `+orderless-dispatch'
;; in the Consult wiki for an advanced Orderless style dispatcher.
;; Enable `partial-completion' for files to allow path expansion.
;; You may prefer to use `initials' instead of `partial-completion'.
(use-package orderless
  :init
  ;; Tune the global completion style settings to your liking!
  ;; This affects the minibuffer and non-lsp completion at point.
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))

(use-package lsp-mode
  :init
  (defun my/lsp-mode-setup-completion ()
    (setq-local completion-styles '(flex)))
  :config
  ;; We use Corfu!
  (setq lsp-completion-provider :none)
  (add-hook 'lsp-completion-mode-hook #'my/lsp-mode-setup-completion)
  (add-hook 'lsp-mode-hook (lambda () (lsp-completion-mode +1))))

;; Add extensions
(use-package cape
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-file)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  :config
  (setq cape-dabbrev-min-length 2
        cape-dabbrev-check-other-buffers 'some))
#+end_src

* =google-translate=
Japanese kana -> romaji
#+begin_src emacs-lisp :tangle yes :results none
(defvar ++google-translate-kana->romaji-buffer "*Google Translate kana->romaji*")

(defun ++google-translate-kana->romaji (kana)
  (replace-regexp-in-string "\r?\n" ""
    (shell-command-to-string
     (format "echo \"%s\" | iconv -f utf8 -t eucjp | kakasi -i euc -w | kakasi -i euc -Ha -Ka -Ja -Ea -ka" kana))))

(defun ++google-translate-curr-region-kana->romaji ()
  (when (equal (buffer-name) "*Google Translate*")
    (if (region-active-p)
      (posframe-show ++google-translate-kana->romaji-buffer
        :string (++google-translate-kana->romaji (buffer-substring-no-properties
                                                   (region-beginning)
                                                   (+ (region-end) 1)))
        :position (point)
        :border-color (doom-color 'yellow)
        :border-width 1
        :foreground-color (doom-color 'yellow))
      (posframe-hide ++google-translate-kana->romaji-buffer))))

(defun ++google-translate-setup-hook ()
  (add-hook 'post-command-hook #'++google-translate-curr-region-kana->romaji))

(++google-translate-setup-hook)
#+end_src
