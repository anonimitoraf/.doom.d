#+TITLE: Misc

* Remove jumps from jump-list on buffer kill
#+begin_src elisp :results none
(defun ++remove-from-jump-list (file-name)
  (interactive)
  (message "Removing %s from jump-list" file-name)
  (let* ((context (better-jumper--get-current-context))
         (old-struct (better-jumper--get-struct))
         (struct (better-jumper--copy-struct old-struct))
         (jumps (ring-elements (better-jumper--get-struct-jump-list struct)))
         (jumps-filtered (->> jumps
                              (reverse)
                              (-filter (lambda (jump) (and jump (not (equal (car jump) file-name)))))))
         (pad-count (- better-jumper-max-length (length jumps-filtered)))
         (jump-list (ring-convert-sequence-to-ring jumps-filtered)))
    (ring-extend jump-list pad-count)
    (aset struct 1 jump-list)
    (better-jumper--set-struct context struct)
    (better-jumper--get-struct context)))

(defun ++remove-current-buffer-from-jump-list ()
  (condition-case ex
      (and buffer-file-name (++remove-from-jump-list buffer-file-name))
    ('error (message (format "Failed to remove buffer %s from jump list: %s" buffer-file-name ex)))))

(advice-add #'kill-current-buffer :before #'++remove-current-buffer-from-jump-list)
#+end_src
* Performance
#+begin_src elisp
(setq garbage-collection-messages nil)
(defmacro k-time (&rest body)
  "Measure and return the time it takes evaluating BODY."
  `(let ((time (current-time)))
     ,@body
     (float-time (time-since time))))

;; Set garbage collection threshold to 1GB.
(setq gc-cons-threshold #x40000000)

;; When idle for N secs run the GC no matter what.
(defvar k-gc-timer
  (run-with-idle-timer 15 t
                       (lambda () (k-time (garbage-collect)))))
#+end_src
* General emacs configurations
I don't really care about byte-compile warnings. Should I?
#+begin_src elisp
(setq byte-compile-warnings '(not obsolete))
#+end_src

Fix for some keys not working in alacritty (e.g. C-S-up). Source https://github.com/alacritty/alacritty/issues/3569#issuecomment-610558110.
#+begin_src elisp
(add-to-list 'term-file-aliases '("alacritty" . "xterm"))
#+end_src

Enable line-wrapping, seems badly named.
#+begin_src elisp
(global-visual-line-mode t)
#+end_src

Disable *Messages* from popping up when minibuffer is clicked
#+begin_src elisp
(define-key minibuffer-inactive-mode-map [mouse-1] #'ignore)
#+end_src

Depend on editorconfig for controlling tabs vs spaces
#+begin_src elisp
(add-hook 'prog-mode-hook (cmd! (doom/set-indent-width 2)))
#+end_src

Mark particular local variables as safe
#+begin_src elisp
(setq ++safe-vars '((+format-on-save-enabled-modes . '())
                    (cider-required-middleware-version . "0.25.5")))
(-each ++safe-vars (lambda (pair)
                     (add-to-list 'safe-local-variable-values pair)))
#+end_src

# Prevent messages from interrupting minibuffer usage! Thanks to https://www.reddit.com/r/emacs/comments/bfoah0/comment/elf53gv
#+begin_src elisp
(setq minibuffer-message-timeout 0.0)
#+end_src

I don't need the mouse-hover help functions, having it enabled makes Emacs lag for me
#+begin_src emacs-lisp :tangle yes :results none
(setq show-help-function nil)
#+end_src
* Enabling only particular formatters
#+begin_src elisp
(setq +format-on-save-enabled-modes
      '(emacs-lisp-mode
        erlang-mode))
#+end_src

* Enabling (extra) ligatures just for some modes
Add to this list on a per-needed basis
#+begin_src elisp
(let ((modes '(clojure-mode
               clojurescript-mode
               clojurec-mode
               emacs-lisp-mode
               org-mode)))
  (setq +ligatures-in-modes modes)
  (setq +ligatures-extras-in-modes modes))
#+end_src
* Terminal considerations
Terminal emacs tends to throw a bunch of extra errors.
#+begin_src elisp
(when (not (display-graphic-p))
  (setq debug-on-error nil))
#+end_src
Allow scrolling via mouse
#+begin_src elisp
(unless (display-graphic-p)
  ;; activate mouse-based scrolling
  (xterm-mouse-mode +1)
  (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
  (global-set-key (kbd "<mouse-5>") 'scroll-up-line))
#+end_src
Allow convenient word deletion with C-<backspace>. In the terminal, C-<backspace> is interpreted as C-h.
#+begin_src elisp
(map! :map global-map "C-h" #'backward-kill-word)
#+end_src
* Prevent Emacs from hanging when exiting
#+begin_src elisp
(setq x-select-enable-clipboard-manager nil)
#+end_src
* Line spacing similar to VSCode
#+begin_src elisp :results none
(setq-default line-spacing 0.25)
(add-hook 'vterm-mode-hook (lambda () (setq-local line-spacing nil)))
#+end_src
* Opening tmux, creating/switching sessions, etc.
#+begin_src elisp
(defun ++tmux--new-session (session-name)
  (++async-shell-command (concat "alacritty --command"
                                 " \"tmux\""
                                 " \"new\""
                                 " \"-s\""
                                 " \"" session-name "\"")
                         (lambda (_) (message (concat "Created new tmux session: " session-name)))))

(defun ++tmux--new-session-quiet (session-name)
  (++async-shell-command (concat "tmux new -d -s " "\"" session-name "\"")
                         (lambda (_) (message (concat "Created new tmux session (quiet): " session-name)))))

(defun ++tmux--switch-session (session-name)
  (++async-shell-command (concat "alacritty --command"
                                 " \"tmux\""
                                 " \"attach-session\""
                                 " \"-t\""
                                 " \"" session-name "\"")
                         (lambda (_) (message (concat "Selected existing tmux session: " session-name)))))

(defun ++tmux--switch-session-quiet (session-name)
  (++async-shell-command (concat "tmux switch -t " "\"" session-name "\"")
                         (lambda (_) (message (concat "Selected existing tmux session (quiet): " session-name)))))

(defun ++tmux-go (&optional quiet?)
  (interactive)
  (++async-shell-command "tmux list-sessions | awk '$0=$1' | sed s/://"
                         (lambda (sessions-str)
                           (let* ((no-sessions (string-match-p "^no server running on.*$" sessions-str))
                                  (sessions (if no-sessions '() (split-string sessions-str))))
                             (ivy-read "Select tmux session: " sessions
                                       :action (lambda (selected-session)
                                                 (if (not (member selected-session sessions))
                                                     ;; Create a new session
                                                     (progn
                                                       (message (concat "Creating new tmux session: " selected-session))
                                                       (if quiet?
                                                           (++tmux--new-session-quiet selected-session)
                                                         (++tmux--new-session selected-session)))
                                                   ;; Switch to an existing session
                                                   (progn
                                                     (message (concat "Selecting existing session " selected-session))
                                                     (if quiet?
                                                         (++tmux--switch-session-quiet selected-session)
                                                       (++tmux--switch-session selected-session))))))))))

(map! :n "SPC _" (cmd! (++tmux-go))
      :n "SPC -" (cmd! (++tmux-go t)))
#+end_src

#+RESULTS:

* Log files
Interpret ANSI color codes
#+begin_src elisp
(require 'ansi-color)
(defun display-ansi-colors ()
  (interactive)
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max))))

(add-to-list 'auto-mode-alist '("\\.log\\'" . display-ansi-colors))
  #+end_src
* Popup rules
Persistent Emacs help window
#+begin_src elisp
(set-popup-rules!
  '(("^\\*helpful function"
     :quit nil
     :size 30)))
#+end_src
* Function that lists out all the hooks that get executed after a command
#+begin_src elisp
;; Stolen from https://emacs.stackexchange.com/a/19582
(defmacro ++with-advice (adlist &rest body)
  "Execute BODY with temporary advice in ADLIST.

Each element of ADLIST should be a list of the form
  (SYMBOL WHERE FUNCTION [PROPS])
suitable for passing to `advice-add'.  The BODY is wrapped in an
`unwind-protect' form, so the advice will be removed even in the
event of an error or nonlocal exit."
  (declare (debug ((&rest (&rest form)) body))
           (indent 1))
  `(progn
     ,@(mapcar (lambda (adform)
                 (cons 'advice-add adform))
               adlist)
     (unwind-protect (progn ,@body)
       ,@(mapcar (lambda (adform)
                   `(advice-remove ,(car adform) ,(nth 2 adform)))
                 adlist))))

(defun ++call-logging-hooks (command &optional verbose)
  "Call COMMAND, reporting every hook run in the process.
Interactively, prompt for a command to execute.

Return a list of the hooks run, in the order they were run.
Interactively, or with optional argument VERBOSE, also print a
message listing the hooks."
  (interactive "CCommand to log hooks: \np")
  (let* ((log     nil)
         (logger (lambda (&rest hooks)
                   (setq log (append log hooks nil)))))
    (++with-advice
     ((#'run-hooks :before logger))
     (call-interactively command))
    (when verbose
      (message
       (if log "Hooks run during execution of %s:"
         "No hooks run during execution of %s.")
       command)
      (dolist (hook log)
        (message "> %s" hook)))
    log))
#+end_src
* Buffer manipulation
#+begin_src elisp
(map! :map evil-normal-state-map
      "g T" #'next-buffer
      "g t" #'previous-buffer)
#+end_src
* Process manipulation
#+begin_src elisp
(map! :map doom-leader-map "l p" #'list-processes)
#+end_src
* Auto-generate ox-hugo headers
#+begin_src elisp
(defun ++ox-hugo-generate-headers ()
  (interactive)
  (save-excursion
    (insert "#+HUGO_BASE_DIR: ..\n")
    (insert "#+HUGO_SECTION: post\n")
    (insert (concat "#+HUGO_CUSTOM_FRONT_MATTER: :date " (format-time-string "%Y-%m-%d") " :pin false :summary \"TODO\"\n"))
    (insert "#+HUGO_TAGS: \"TODO\"\n")))
#+end_src
* Enabling modeline for most (if not, all) buffers, including popups
#+begin_src elisp
(plist-put +popup-defaults :modeline t)
(remove-hook '+popup-buffer-mode-hook #'+popup-set-modeline-on-enable-h)

(add-hook '+dap-running-session-mode-hook #'doom-modeline-mode)

(remove-hook 'vterm-mode-hook #'hide-mode-line-mode)
(add-hook 'vterm-mode-hook #'doom-modeline-mode)
#+end_src
* Temporary hacks
Hack for error `(void-function lsp--matching-clients\?)'
#+begin_src elisp
(after! lsp-mode
  (advice-remove #'lsp #'+lsp-dont-prompt-to-install-servers-maybe-a))
#+end_src
* Scrolling
Perpetual quest to make scrolling feel alright (if not supported)
#+begin_src elisp
(if (fboundp 'pixel-scroll-precision-mode)
  (pixel-scroll-precision-mode +1)
  (setq scroll-margin 1
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1))
#+end_src
* Personal projects
* Emacs as a clipboard manager
#+begin_src elisp :results none
(setq kill-ring-max 10000)
#+end_src
* Increase recent file list
#+begin_src elisp :results none
(setq recentf-max-menu-items 20
      recentf-max-saved-items 400)
#+end_src
* Who needs a shell when I have Emacs?
#+begin_src emacs-lisp :tangle yes :results none
(map! :map doom-leader-map "s x" #'async-shell-command)
(set-popup-rules!
    '(("*Async Shell Command*"
       :quit t
       :side bottom
       :size 10
       :select nil)))
#+end_src
* File/dir manipulation
Copy dir path of curr buffer
#+begin_src emacs-lisp :results none
(defun ++copy-dir-path ()
  (interactive)
  (let ((dir-path (concat "\"" default-directory "\"")))
    (kill-new dir-path)
    (message "Copied dir path: %s into clipboard" dir-path)))
#+end_src
* Shortcuts of built-ins
#+begin_src emacs-lisp :results none
(map! :map doom-leader-map
  "+" #'calc)
#+end_src
* Other custom functionality
Regularly save to a session file. I use this a lot because I can't be bothered constantly saving my session!
#+begin_src elisp
(defun ++load-and-continuously-save (file)
  (interactive
   (let ((session-file (doom-session-file)))
     (list (or (read-file-name "Regularly saving session to: "
                               (file-name-directory session-file)
                               (file-name-nondirectory session-file))
               (user-error "No session selected. Aborting")))))
  (unless file
    (error "No session file selected"))
  ;; Load the session
  (doom/load-session file)
  ;; Clear any previous calls to this fn
  (when (boundp '++continuous-saving-timer)
    (cancel-timer ++continuous-saving-timer))
  ;; Save the session every 10 seconds
  (setq ++continuous-saving-timer
        (run-with-idle-timer 5 t (cmd!
                                  (let ((inhibit-message t))
                                    (advice-add #'doom-save-session :around #'++suppress-messages)
                                    (doom-save-session file))))))
(map! :map doom-leader-map "q N" '++load-and-continuously-save)
#+end_src

Open external terminal
#+begin_src elisp
(defun external-terminal ()
  (interactive "@")
  (setenv "INSIDE_EMACS" nil)
  (shell-command (concat "alacritty"
                         " -qq"
                         " --working-directory " (file-name-directory (or load-file-name buffer-file-name))
                         " & disown") nil nil))
#+end_src

Show a random MELPA package every so often
#+begin_src elisp
(defvar ++random-melpa-pkg-timer nil)

(defun ++show-random-melpa-pkg ()
  (interactive)
  (package-list-packages-no-fetch)
  (with-current-buffer (get-buffer "*Packages*")
    (let* ((lines-num (count-lines (point-min) (point-max)))
           (line (random (1- lines-num)))
           (content (buffer-substring-no-properties
                     (line-beginning-position line)
                     (line-end-position line))))
      (prog1
          (alert content
                 :title "Random MELPA package trivia"
                 :id 'random-melpa-pkg)
        (kill-buffer)))))

(defun ++random-melpa-pkg-start ()
  (interactive)
  ;; Make sure starting is idempotent
  (unless ++random-melpa-pkg-timer
    (setq ++random-melpa-pkg-timer
          (run-at-time 0 20 #'++show-random-melpa-pkg))))

(defun ++random-melpa-pkg-stop ()
  (interactive)
  (when ++random-melpa-pkg-timer
    (cancel-timer ++random-melpa-pkg-timer)
    (setq ++random-melpa-pkg-timer nil)))
#+end_src

Needing to open a file in multiple buffers (e.g. viewing XPM as an image and as C code)
#+begin_src elisp
(defun ++open-current-file-in-new-buffer ()
  "Open the file that the current buffer is visiting in a new buffer."
  (interactive)
  (let* ((fn buffer-file-name)
         (buf (create-file-buffer fn)))
    (with-current-buffer buf
      (setq buffer-file-name fn)
      (revert-buffer t t))
    (switch-to-buffer-other-window buf)))
#+end_src

Make it easy to select and display a CIDER buffer for the current project
#+begin_src elisp
(defun ++cider-popup ()
  (interactive)
  (let* ((all-buffers (mapcar #'buffer-name (buffer-list)))
         (cider-buffers (seq-filter
                         (lambda (buf) (string-match-p (concat
                                                        "\\*"
                                                        "cider-repl "
                                                        ".*"
                                                        (projectile-project-name)
                                                        ":.+" ;; hostname
                                                        ":[0-9]+" ;; port
                                                        ".*"
                                                        "\\*")
                                                       buf))
                         all-buffers)))
    (ivy-read "Pop-up CIDER buffer: " cider-buffers
              :require-match t
              :action (lambda (buf-name)
                        (display-buffer buf-name
                                        '(pop-to-buffer . ((side . left)
                                                           (slot . -1))))))))

(map! :map clojure-mode-map :nv "SPC m r p" #'++cider-popup)
(map! :map clojurescript-mode-map :nv "SPC m r p" #'++cider-popup)
(map! :map clojurec-mode-map :nv "SPC m r p" #'++cider-popup)
#+end_src

Custom Elisp that I can't commit publicly or stuff I'm constantly working on
#+begin_src elisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'onetwo nil t)
(require 'skerrick nil t)
#+end_src

Converting an org table -> CSV
#+begin_src elisp
(defun ++org-table->csv (table-name)
  "Search for table named `TABLE-NAME` and export."
  (interactive "sTable name to export to CSV: ")
  (save-excursion
    (message "Exporting table %s to CSV" table-name)
    (outline-show-all)
    (goto-char (point-min))
    (let ((case-fold-search t))
     (if (search-forward-regexp (concat "#\\+TBLNAME: +" table-name) nil t)
       (progn
         (next-line)
         (org-table-export (format "%s.csv" table-name) "orgtbl-to-csv"))))))
#+end_src

Tell me whether my webcam is active
#+begin_src elisp
(defun ++webcam-active? ()
  (interactive)
  (let ((v (shell-command-to-string "lsmod | grep uvcvideo | head -c -1 | awk 'NR==1 { printf $3 }'")))
    (message (if (equal v "1") "ACTIVE" "NOT ACTIVE"))))
#+end_src

Demo-recording
#+begin_src elisp
(defun ++demo-recording ()
  (interactive)
  (map! :map doom-leader-map "m e r" #'skerrick-eval-region)
  (hide-mode-line-mode +1)
  (display-line-numbers-mode -1))
#+end_src
** TODO Automatically kill CIDER buffers with dead connections
** TODO CIDER headerline/modeline to make it obvious which server and which port
