#+TITLE: Appearance

* Theme
#+begin_src elisp :results none
(use-package emacs
  :init
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-italic-constructs t
    modus-themes-bold-constructs nil
    modus-themes-region '(bg-only no-extend))
  :config
  ;; Load the theme of your choice:
  (load-theme 'modus-vivendi) ;; OR (load-theme 'modus-vivendi)
  (setq modus-themes-italic-constructs t
    modus-themes-bold-constructs nil
    modus-themes-mixed-fonts nil
    modus-themes-subtle-line-numbers nil
    modus-themes-intense-mouseovers nil
    modus-themes-deuteranopia nil
    modus-themes-tabs-accented t
    modus-themes-variable-pitch-ui nil
    modus-themes-inhibit-reload t ; only applies to `customize-set-variable' and related

    modus-themes-fringes nil            ; {nil,'subtle,'intense}

    ;; Options for `modus-themes-lang-checkers' are either nil (the
    ;; default), or a list of properties that may include any of those
    ;; symbols: `straight-underline', `text-also', `background',
    ;; `intense' OR `faint'.
    modus-themes-lang-checkers nil

    ;; Options for `modus-themes-mode-line' are either nil, or a list
    ;; that can combine any of `3d' OR `moody', `borderless',
    ;; `accented', a natural number for extra padding (or a cons cell
    ;; of padding and NATNUM), and a floating point for the height of
    ;; the text relative to the base font size (or a cons cell of
    ;; height and FLOAT)
    modus-themes-mode-line '(accented borderless (padding . 4) (height . 0.9))

    ;; Same as above:
    ;; modus-themes-mode-line '(accented borderless 4 0.9)

    ;; Options for `modus-themes-markup' are either nil, or a list
    ;; that can combine any of `bold', `italic', `background',
    ;; `intense'.
    modus-themes-markup '(background italic)

    ;; Options for `modus-themes-syntax' are either nil (the default),
    ;; or a list of properties that may include any of those symbols:
    ;; `faint', `yellow-comments', `green-strings', `alt-syntax'
    modus-themes-syntax nil

    ;; Options for `modus-themes-hl-line' are either nil (the default),
    ;; or a list of properties that may include any of those symbols:
    ;; `accented', `underline', `intense'
    modus-themes-hl-line '(underline accented)

    ;; Options for `modus-themes-paren-match' are either nil (the
    ;; default), or a list of properties that may include any of those
    ;; symbols: `bold', `intense', `underline'
    modus-themes-paren-match '(bold intense underline)

    ;; Options for `modus-themes-links' are either nil (the default),
    ;; or a list of properties that may include any of those symbols:
    ;; `neutral-underline' OR `no-underline', `faint' OR `no-color',
    ;; `bold', `italic', `background'
    modus-themes-links '(neutral-underline background)

    ;; Options for `modus-themes-box-buttons' are either nil (the
    ;; default), or a list that can combine any of `flat', `accented',
    ;; `faint', `variable-pitch', `underline', `all-buttons', the
    ;; symbol of any font weight as listed in `modus-themes-weights',
    ;; and a floating point number (e.g. 0.9) for the height of the
    ;; button's text.
    modus-themes-box-buttons '(variable-pitch flat faint 0.9)

    ;; Options for `modus-themes-prompts' are either nil (the
    ;; default), or a list of properties that may include any of those
    ;; symbols: `background', `bold', `gray', `intense', `italic'
    modus-themes-prompts '(intense bold)

    ;; The `modus-themes-completions' is an alist that reads three
    ;; keys: `matches', `selection', `popup'.  Each accepts a nil
    ;; value (or empty list) or a list of properties that can include
    ;; any of the following (for WEIGHT read further below):
    ;;
    ;; `matches' - `background', `intense', `underline', `italic', WEIGHT
    ;; `selection' - `accented', `intense', `underline', `italic', `text-also' WEIGHT
    ;; `popup' - same as `selected'
    ;; `t' - applies to any key not explicitly referenced (check docs)
    ;;
    ;; WEIGHT is a symbol such as `semibold', `light', or anything
    ;; covered in `modus-themes-weights'.  Bold is used in the absence
    ;; of an explicit WEIGHT.
    modus-themes-completions '((matches . (extrabold))
                                (selection . (semibold accented))
                                (popup . (accented intense)))

    modus-themes-mail-citations nil     ; {nil,'intense,'faint,'monochrome}

    ;; Options for `modus-themes-region' are either nil (the default),
    ;; or a list of properties that may include any of those symbols:
    ;; `no-extend', `bg-only', `accented'
    modus-themes-region '(bg-only no-extend)

    ;; Options for `modus-themes-diffs': nil, 'desaturated, 'bg-only
    modus-themes-diffs 'desaturated

    modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}

    modus-themes-org-agenda ; this is an alist: read the manual or its doc string
    '((header-block . (variable-pitch 1.3))
       (header-date . (grayscale workaholic bold-today 1.1))
       (event . (accented varied))
       (scheduled . uniform)
       (habit . traffic-light))

    modus-themes-headings  ; this is an alist: read the manual or its doc string
    '((1 . (overline background variable-pitch 1.3))
       (2 . (rainbow overline 1.1))
       (t . (semibold)))))
#+end_src
* Font
I want my font to automatically resize based on which screen Emacs is
#+begin_src elisp
(defvar ++font-size nil)
(defun ++screen-pixels->font-size (width-x-height)
  "Given WIDTH_X_HEIGHT, returns the adjusted font size"
  (let ((default-font-size 16))
    (cond ((member width-x-height
                   '((3440 1440))) 18)
          ((member width-x-height
                   '((1920 1080))) 14)
          ;; My Flux mac
          ((member width-x-height
                    '((1440 900))) 16)
          (t (progn
               (message (concat "Unhandled screen resolution " (prin1-to-string width-x-height) ". "
                                "Defaulting to font size " (prin1-to-string default-font-size)))
               default-font-size)))))

;; Stolen from https://github.com/hlissner/doom-emacs/issues/1500
(defun ++get-frame-list (&optional frame)
  "Return a list consisting of FRAME and all of FRAME's child frames."
  (let ((frame (or frame (selected-frame))))
    (cons (selected-frame)
          (cl-loop for fr in (frame-list)
                   if (eq (frame-parameter fr 'parent-frame) frame)
                   collect fr))))

(defun ++configure-font-size ()
  (let ((new-font-size (++screen-pixels->font-size
                        (cddr (frame-monitor-attribute 'geometry)))))
    (unless (equal new-font-size ++font-size)
      (setq doom-font (font-spec :family "Ubuntu Mono" :size new-font-size))
      (set-frame-font doom-font t (++get-frame-list)))
    (setq ++font-size new-font-size)))

(when (display-graphic-p)
 (run-at-time 0 nil (lambda () (++configure-font-size)))
 (setq ++adjust-font-timer (run-with-idle-timer 1 1 #'++configure-font-size)))
#+end_src
* Dashboard
** Banner
#+begin_src elisp
(defun ++ascii-banner-ansi-shadow ()
  (mapc (lambda (line)
          (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
                              'face 'doom-dashboard-banner) " ")
          (insert "\n"))
        '("=================     ===============     ===============   ========  ========"
          "\\\\ . . . . . . .\\\\   //. . . . . . .\\\\   //. . . . . . .\\\\  \\\\. . .\\\\// . . //"
          "||. . ._____. . .|| ||. . ._____. . .|| ||. . ._____. . .|| || . . .\\/ . . .||"
          "|| . .||   ||. . || || . .||   ||. . || || . .||   ||. . || ||. . . . . . . ||"
          "||. . ||   || . .|| ||. . ||   || . .|| ||. . ||   || . .|| || . | . . . . .||"
          "|| . .||   ||. _-|| ||-_ .||   ||. . || || . .||   ||. _-|| ||-_.|\\ . . . . ||"
          "||. . ||   ||-'  || ||  `-||   || . .|| ||. . ||   ||-'  || ||  `|\\_ . .|. .||"
          "|| . _||   ||    || ||    ||   ||_ . || || . _||   ||    || ||   |\\ `-_/| . ||"
          "||_-' ||  .|/    || ||    \\|.  || `-_|| ||_-' ||  .|/    || ||   | \\  / |-_.||"
          "||    ||_-'      || ||      `-_||    || ||    ||_-'      || ||   | \\  / |  `||"
          "||    `'         || ||         `'    || ||    `'         || ||   | \\  / |   ||"
          "||            .===' `===.         .==='.`===.         .===' /==. |  \\/  |   ||"
          "||         .=='   ███████╗███╗   ███╗ █████╗  ██████╗███████╗  `==  \\/  |   ||"
          "||      .=='    _-██╔════╝████╗ ████║██╔══██╗██╔════╝██╔════╝_  /|  \\/  |   ||"
          "||   .=='    _-'  █████╗  ██╔████╔██║███████║██║     ███████╗ `' |. /|  |   ||"
          "||.=='    _-'     ██╔══╝  ██║╚██╔╝██║██╔══██║██║     ╚════██║     `' |  /==.||"
          "=='    _-'        ███████╗██║ ╚═╝ ██║██║  ██║╚██████╗███████║         \\/   `=="
          "\\   _-'           ╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝          `-_   /"
          "`''                                                                      ``'")))
(setq +doom-dashboard-ascii-banner-fn #'++ascii-banner-ansi-shadow)
#+end_src
** Remove the menu
I know most of the keyboard shortcuts by now :P
#+begin_src elisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
#+end_src
** Show a random Clojure core symbol (for learning purposes)
#+begin_src elisp
(require 'clojure-rand-ref)

(defun ++dashboard-trivia ()
 (clojure-rand-ref
  (lambda (entry)
    (with-current-buffer +doom-dashboard-name
      (when entry
        (read-only-mode -1)
        (goto-char (point-min))
        (forward-line 5)
        (insert "Clojure Trivia\n\n")
        (insert-text-button (concat "  " (plist-get entry :symbol) "\n")
                            'action (lambda (_)
                                      (+doom-dashboard-reload t)
                                      (++dashboard-trivia)
                                      (browse-url (plist-get entry :link)))
                            'face 'doom-dashboard-menu-title
                            'mouse-face 'doom-dashboard-menu-title
                            'follow-link t)
        (insert "  " (plist-get entry :description) "\n")
        (read-only-mode +1))))))

(unless IS-MAC (advice-add #'+doom-dashboard-init-h :after #'++dashboard-trivia))
#+end_src
* Misc
#+begin_src elisp
(setq display-time-default-load-average nil
      display-time-24hr-format t
      display-line-numbers-type 'relative)
#+end_src

Highlight the whole s-expr, not just the enclosing parens.
#+begin_src elisp
(setq show-paren-style 'expression)
#+end_src
