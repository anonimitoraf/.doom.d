#+TITLE: Appearance

* Colors
I'm rather fond of vscode's theme for highlighting search results
#+begin_src elisp
(defvar ++vscode-search-occ-bg "#48240a")
(defvar ++vscode-search-occ-fg "#cccccc")
#+end_src
* Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function.
#+begin_src elisp
(setq doom-theme 'doom-one)

(use-package doom-themes
  :config
  ;; Use the colorful treemacs theme
  (setq doom-themes-treemacs-theme "doom-colors"
        doom-themes-enable-bold nil    ; if nil, bold is universally disabled
        doom-themes-enable-italic nil)
  (doom-themes-treemacs-config)
  (doom-themes-org-config)

  ;; Custom style tweaks
  ;; See https://github.com/hlissner/emacs-doom-themes/blob/master/themes/doom-one-theme.el#L32
  ;; for the doom-colors
  (custom-set-faces!
    `(swiper-background-match-face-2 :background ,++vscode-search-occ-bg
                                     :foreground ,++vscode-search-occ-fg)
    `(swiper-match-face-2 :background ,++vscode-search-occ-bg
                          :foreground ,++vscode-search-occ-fg)
    `(swiper-line-face :background "DodgerBlue4"
                       :foreground ,++vscode-search-occ-fg)
    ;; TODO Move the LSP faces out of here?
    `(lsp-ui-peek-peek :background "#000029")
    `(lsp-ui-peek-selection :background ,++vscode-search-occ-bg
                            :foreground ,++vscode-search-occ-fg)
    `(lsp-ui-peek-list :background "grey7"
                       :height 1.0
                       :width condensed)
    `(lsp-ui-peek-header :background "#000050"
                         :foreground "white"
                         :height 0.8
                         :width condensed)
    `(lsp-ui-peek-filename :foreground "#98be65"
                           :height 1.0
                           :width condensed
                           :box (:line-width (1 . 10)
                                 :color "grey7"))
    `(lsp-ui-peek-line-number :foreground "grey7")
    `(lsp-ui-peek-highlight :background ,++vscode-search-occ-bg
                            :foreground ,++vscode-search-occ-fg
                            :heght 1.0
                            :box nil
                            :inherit nil)
    '(show-paren-match :foreground nil
                       :background "#333"
                       :weight normal)
    `(ac-completion-face :foreground ,(doom-color 'yellow))
    `(ac-selection-face :foreground "black"
                        :background ,(doom-color 'magenta)))
  ;; GUI
  (if (display-graphic-p)
      (custom-set-faces!
        `(default :background "black")
        `(fill-column-indicator :foreground ,(doom-color 'base1))
        `(window-divider :foreground "grey5")
        `(flycheck-posframe-error-face :background "firebrick"
                                       :foreground "white")
        `(flycheck-posframe-warning-face :background "dark goldenrod"
                                         :foreground "white"))
    ;; TERM (Alacritty)
    ;; Weirdly, "black" is more like "dark grey"
    (custom-set-faces!
      `(default :background "color-16")
      `(header-line :background "black"))))

(setq window-divider-default-right-width 10)
#+end_src
* Font
I want my font to automatically resize based on which screen Emacs is
#+begin_src elisp
(defvar ++font-size nil)
(defun ++screen-pixels->font-size (width-x-height)
  "Given WIDTH_X_HEIGHT, returns the adjusted font size"
  (let ((default-font-size 16))
    (cond ((member width-x-height
                   '((3440 1440))) 18)
          ((member width-x-height
                   '((1920 1080))) 15)
          (t (progn
               (message (concat "Unhandled screen resolution " (prin1-to-string width-x-height) ". "
                                "Defaulting to font size " (prin1-to-string default-font-size)))
               default-font-size)))))

;; Stolen from https://github.com/hlissner/doom-emacs/issues/1500
(defun ++get-frame-list (&optional frame)
  "Return a list consisting of FRAME and all of FRAME's child frames."
  (let ((frame (or frame (selected-frame))))
    (cons (selected-frame)
          (cl-loop for fr in (frame-list)
                   if (eq (frame-parameter fr 'parent-frame) frame)
                   collect fr))))

(defun ++configure-font-size ()
  (let ((new-font-size (++screen-pixels->font-size
                        (cddr (frame-monitor-attribute 'geometry)))))
    (unless (equal new-font-size ++font-size)
      (setq doom-font (font-spec :family "Ubuntu Mono" :size new-font-size))
      (set-frame-font doom-font t (++get-frame-list)))
    (setq ++font-size new-font-size)))

(++configure-font-size)
(setq ++adjust-font-timer (run-with-idle-timer 1 1 #'++configure-font-size))
#+end_src
* Dashboard
** Banner
#+begin_src elisp
(defun ++ascii-banner-ansi-shadow ()
  (mapc (lambda (line)
          (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
                              'face 'doom-dashboard-banner) " ")
          (insert "\n"))
        '("=================     ===============     ===============   ========  ========"
          "\\\\ . . . . . . .\\\\   //. . . . . . .\\\\   //. . . . . . .\\\\  \\\\. . .\\\\// . . //"
          "||. . ._____. . .|| ||. . ._____. . .|| ||. . ._____. . .|| || . . .\\/ . . .||"
          "|| . .||   ||. . || || . .||   ||. . || || . .||   ||. . || ||. . . . . . . ||"
          "||. . ||   || . .|| ||. . ||   || . .|| ||. . ||   || . .|| || . | . . . . .||"
          "|| . .||   ||. _-|| ||-_ .||   ||. . || || . .||   ||. _-|| ||-_.|\\ . . . . ||"
          "||. . ||   ||-'  || ||  `-||   || . .|| ||. . ||   ||-'  || ||  `|\\_ . .|. .||"
          "|| . _||   ||    || ||    ||   ||_ . || || . _||   ||    || ||   |\\ `-_/| . ||"
          "||_-' ||  .|/    || ||    \\|.  || `-_|| ||_-' ||  .|/    || ||   | \\  / |-_.||"
          "||    ||_-'      || ||      `-_||    || ||    ||_-'      || ||   | \\  / |  `||"
          "||    `'         || ||         `'    || ||    `'         || ||   | \\  / |   ||"
          "||            .===' `===.         .==='.`===.         .===' /==. |  \\/  |   ||"
          "||         .=='   ███████╗███╗   ███╗ █████╗  ██████╗███████╗  `==  \\/  |   ||"
          "||      .=='    _-██╔════╝████╗ ████║██╔══██╗██╔════╝██╔════╝_  /|  \\/  |   ||"
          "||   .=='    _-'  █████╗  ██╔████╔██║███████║██║     ███████╗ `' |. /|  |   ||"
          "||.=='    _-'     ██╔══╝  ██║╚██╔╝██║██╔══██║██║     ╚════██║     `' |  /==.||"
          "=='    _-'        ███████╗██║ ╚═╝ ██║██║  ██║╚██████╗███████║         \\/   `=="
          "\\   _-'           ╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝╚══════╝          `-_   /"
          "`''                                                                      ``'")))
(setq +doom-dashboard-ascii-banner-fn #'++ascii-banner-ansi-shadow)
#+end_src
** Remove the menu
I know most of the keyboard shortcuts by now :P
#+begin_src elisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
#+end_src
** Show a random Clojure core symbol (for learning purposes)
#+begin_src elisp
(require 'clojure-rand-ref)

(defun ++dashboard-trivia ()
 (clojure-rand-ref
  (lambda (entry)
    (with-current-buffer +doom-dashboard-name
      (when entry
        (read-only-mode -1)
        (goto-char (point-min))
        (forward-line 5)
        (insert "Clojure Trivia\n\n")
        (insert-text-button (concat "  " (plist-get entry :symbol) "\n")
                            'action (lambda (_)
                                      (+doom-dashboard-reload t)
                                      (++dashboard-trivia)
                                      (browse-url (plist-get entry :link)))
                            'face 'doom-dashboard-menu-title
                            'mouse-face 'doom-dashboard-menu-title
                            'follow-link t)
        (insert "  " (plist-get entry :description) "\n")
        (read-only-mode +1))))))

(advice-add #'+doom-dashboard-init-h :after #'++dashboard-trivia)
#+end_src
* Modeline
#+begin_src elisp
(after! doom-modeline
  (custom-set-faces!
    '(mode-line :height 0.9 :width condensed)
    '(mode-line-inactive :height 0.9 :width condensed)
    '(mode-line-emphasis :inherit mode-line)
    '(doom-modeline-buffer-file :weight normal))
  ;; TERM (Alacritty)
  (unless (display-graphic-p)
    (custom-set-faces!
      `(mode-line :background "darkred")
      `(mode-line-inactive :background "black"))))
#+end_src
* Misc
#+begin_src elisp
(setq display-time-default-load-average nil
      display-time-24hr-format t
      display-line-numbers-type 'relative)
#+end_src

It's a bit distracting to highlight the current line. It's easy enough to press `S-v` when needed.
#+begin_src elisp
(add-hook 'hl-line-mode-hook (lambda () (setq hl-line-mode nil)))
#+end_src

Highlight the whole s-expr, not just the enclosing parens.
#+begin_src elisp
(setq show-paren-style 'expression)
#+end_src
