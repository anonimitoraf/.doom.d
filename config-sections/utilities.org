#+TITLE: Utilities

* Converting Stuff
#+begin_src elisp
(defun ++kb (bytes) (* bytes 1024))
(defun ++mb (bytes) (* (++kb bytes) 1024))
#+end_src

* Making it easy to configure faces
#+begin_src elisp
(defun ++with-face (str &rest face-plist)
  (propertize str 'face face-plist))
#+end_src
** TODO Add examples
* Asynchronously executing a shell command
(Borrowed from https://stackoverflow.com/a/23078813)
#+begin_src elisp
(defun ++async-shell-command (command &optional callback)
  "Execute shell COMMAND asynchronously in the background.

Return the temporary output buffer which command is writing to
during execution.

When the command is finished, call CALLBACK with the resulting
output as a string."
  (let* ((output-buffer (generate-new-buffer " *++async-shell-command*"))
         (callback-fn (or callback (lambda (_)))))
    (set-process-sentinel
     (start-process "++async-shell-command" output-buffer shell-file-name shell-command-switch command)
     (lambda (process _signal)
       (when (memq (process-status process) '(exit signal))
         (with-current-buffer output-buffer
           (let ((output-string
                  (buffer-substring-no-properties
                   (point-min)
                   (point-max))))
             (funcall callback-fn output-string)))
         (kill-buffer output-buffer))))
    output-buffer))
#+end_src

* Nifty functions
#+begin_src elisp :results none
(defmacro ++comment (&rest body)
  "Comment out one or more s-expressions."
  nil)

(defmacro ++spy (form)
  `(message (concat (prin1-to-string ',form) " => %s") ,form))

(++comment
 (++spy (+ 1 1)) ;; "(+ 1 1) => 2"
 (++spy IS-LINUX) ;; "IS-LINUX => t"
 )

(defmacro ++advice-lambda (fnc)
  "Return function that ignores its arguments and invokes FNC."
  `(lambda (&rest _rest)
     (funcall ,fnc)))
#+end_src
* Suppressing minibuffer messages
#+begin_src elisp :results none
(defun ++suppress-messages (old-fun &rest args)
  (cl-flet ((silence (&rest args1) (ignore)))
    (advice-add 'message :around #'silence)
    (unwind-protect
         (apply old-fun args)
      (advice-remove 'message #'silence))))
#+end_src

Or alternatively
#+begin_src elisp :results none
(defun ++silence-messages (orig-fun &rest args)
  "Advice function that silences all messages in ORIG-FUN."
  (let ((inhibit-message t)      ;Don't show the messages in Echo area
        (message-log-max nil))   ;Don't show the messages in the *Messages* buffer
    (apply orig-fun args)))
#+end_src


* Useful general variables
#+begin_src emacs-lisp :tangle yes :results none
(defvar ++window-id (shell-command-to-string "xdotool getwindowfocus getactivewindow | tr -d '\n'"))
#+end_src
* Javascript
#+begin_src elisp :results none
(defun ++js-root-dir ()
  (locate-dominating-file (or buffer-file-name default-directory) "package.json"))
#+end_src

Get prettier path from current buffer
#+begin_src elisp :results none
(defun ++js-prettier-path ()
  (expand-file-name (concat (++js-root-dir) "node_modules/.bin/prettier")))
#+end_src
