#+TITLE: Languages

* Clojure/script
Nice offline docs
#+begin_src elisp
(add-to-list 'dash-docs-docsets "Clojure")
#+end_src

Font lock "hacks". TODO Find out how to do these properly
#+begin_src elisp
(add-hook 'clojure-mode-hook
          '(lambda ()
             ;; Set some new syntax-highlighting rules.
             ;; Guardrail's >defn
             ;; Highlight particular macros similar to built-in stuff
             ;; For example, highlight ghostwheel's `>defn' similar
             ;; the same way as built-in `defn'
             (font-lock-add-keywords nil
                                     ;; So many escape codes! But we're really just saying:
                                     ;; Match the '(' character.
                                     ;; Match and group the string '>defn'.
                                     ;; Match some whitespace. \\s-+
                                     ;; Match and group some word characters. \\w+
                                     '(("(\\(>defn\\)\\s-+\\(\\w+\\)"
                                        ;; The first regexp group is a keyword.
                                        (1 font-lock-keyword-face)
                                        ;; The second regexp group is a name.
                                        (2 font-lock-function-name-face))))
             (put '>defn 'clojure-doc-string-elt 2)))
#+end_src

Popup rules
#+begin_src elisp
(set-popup-rules!
  '(("^\\*cider-repl"
     :quit nil
     :side bottom
     :size 0.2
     :select t)
    ("^\\*\\(?:cider-doc\\|lsp-help\\)"
     :side right
     :size 0.5)))
#+end_src

Ligatures
#+begin_src elisp
(plist-put! +ligatures-extra-symbols
            :lambda-prime "Æ›")

(set-ligatures! 'clojurescript-mode
  ;; Account for re-frame debux forms
  :lambda-prime "fn-traced")
#+end_src

* Emacs Lisp
#+begin_src elisp

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (define-key emacs-lisp-mode-map "\C-c\C-v" erefactor-map)))
#+end_src
* Erlang
Function for generating TAGS
#+begin_src elisp
(defun ++erlang-etags ()
  (interactive)
  (async-shell-command
   (format (concat
            "find %s -type f -name \"*.[he]rl\" | etags.emacs"
            " -o " (concat (projectile-project-root) "TAGS")
            " -")
           (projectile-project-root))))
#+end_src
Company is a bit useless inside the erlang-shell
#+begin_src elisp
(map! :map erlang-shell-mode-map "C-SPC" #'erlang-complete-tag)

(add-hook 'erlang-shell-mode-hook (lambda () (company-mode -1)))
#+end_src
* Type/Javascript
#+begin_src elisp
;; TODO Should this be part of a use-package! call?
(setq typescript-indent-level 2)

;; TODO Is this redundant the setting of indentation somewhere else?
(add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2)))

(use-package! gherkin-mode
  :config (add-to-list 'auto-mode-alist '("\\.feature\\'" . gherkin-mode)))
#+end_src
