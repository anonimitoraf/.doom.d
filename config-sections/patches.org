#+TITLE: Patches
#+DESCRIPTION: File meant to be for patches/hacks while waiting for the official repo authors to push their fixes

* =shell=
Fix the fact that closing the window also kills the buffer. We don't want this
#+begin_src elisp :results none
(use-package! shell
  :config
  (defun +shell/toggle (&optional command)
    "Toggle a persistent terminal popup window.

If popup is visible but unselected, selected it.
If popup is focused, kill it."
    (interactive)
    (let ((buffer
           (get-buffer-create
            (format "*doom:shell-popup:%s*"
                    (if (bound-and-true-p persp-mode)
                        (safe-persp-name (get-current-persp))
                      "main"))))
          (dir default-directory))
      (if-let (win (get-buffer-window buffer))
          (let (confirm-kill-processes)
            (set-process-query-on-exit-flag (get-buffer-process buffer) nil)
            (delete-window win))
        (with-current-buffer buffer
          (if (not (eq major-mode 'shell-mode))
              (shell buffer)
            (cd dir)
            (run-mode-hooks 'shell-mode-hook)))
        (pop-to-buffer buffer))
      (+shell--send-input buffer command))))

(defun +shell--send-input (buffer input &optional no-newline)
  (when input
    (with-current-buffer buffer
      (unless (number-or-marker-p (cdr comint-last-prompt))
        (message "Waiting for shell to start up...")
        (while (not (number-or-marker-p (cdr comint-last-prompt)))
          (sleep-for 0.1)))
      (goto-char (cdr comint-last-prompt))
      (delete-region (cdr comint-last-prompt) (point-max))
      (insert input)
      (comint-send-input no-newline))))
#+end_src
* =vertico=
#+begin_src elisp :results none
(defun ++filter-vertico-exits ()
  (setq vertico-repeat-history
        (seq-filter (lambda (session)
                      (not (equal (car session) 'vertico-exit)))
                    vertico-repeat-history)))
(advice-add #'vertico-repeat-select :before #'++filter-vertico-exits)

(defun ++vertico-repeat-last ()
  (interactive)
  (++filter-vertico-exits)
  (call-interactively #'vertico-repeat-last))

(map! :map doom-leader-map
      "'" #'++vertico-repeat-last)
#+end_src
* =lsp-mode= (Typescript)
#+begin_src elisp :results none
(lsp-register-client
 (make-lsp-client :new-connection (lsp-stdio-connection (lambda ()
                                                          `(,(lsp-package-path 'typescript-language-server)
                                                            ,@lsp-clients-typescript-server-args)))
                  :activation-fn 'lsp-typescript-javascript-tsx-jsx-activate-p
                  :priority -2
                  :completion-in-comments? t
                  :initialization-options (lambda ()
                                            (append
                                             (when lsp-clients-typescript-disable-automatic-typing-acquisition
                                               (list :disableAutomaticTypingAcquisition lsp-clients-typescript-disable-automatic-typing-acquisition))
                                             (when lsp-clients-typescript-log-verbosity
                                               (list :logVerbosity lsp-clients-typescript-log-verbosity))
                                             (when lsp-clients-typescript-max-ts-server-memory
                                               (list :maxTsServerMemory lsp-clients-typescript-max-ts-server-memory))
                                             (when lsp-clients-typescript-npm-location
                                               (list :npmLocation lsp-clients-typescript-npm-location))
                                             (when lsp-clients-typescript-plugins
                                               (list :plugins lsp-clients-typescript-plugins))
                                             (when lsp-clients-typescript-preferences
                                               (list :preferences lsp-clients-typescript-preferences))
                                             (when lsp-clients-typescript-tsserver
                                               (list :tsserver lsp-clients-typescript-tsserver))))
                  :initialized-fn (lambda (workspace)
                                    (with-lsp-workspace workspace
                                      (lsp--set-configuration
                                       (ht-merge (lsp-configuration-section "javascript")
                                                 (lsp-configuration-section "typescript")
                                                 (lsp-configuration-section "completions")
                                                 (lsp-configuration-section "diagnostics"))))
                                    (let ((caps (lsp--workspace-server-capabilities workspace))
                                          (format-enable (or lsp-javascript-format-enable lsp-typescript-format-enable)))
                                      (lsp:set-server-capabilities-document-formatting-provider? caps format-enable)
                                      (lsp:set-server-capabilities-document-range-formatting-provider? caps format-enable)))
                  :ignore-messages '("readFile .*? requested by TypeScript but content not available")
                  :server-id 'ts-ls
                  :request-handlers (ht ("_typescript.rename" #'lsp-javascript--rename))
                  :download-server-fn (lambda (_client callback error-callback _update?)
                                        (lsp-package-ensure
                                         'typescript
                                         (-partial #'lsp-package-ensure
                                                   'typescript-language-server
                                                   callback
                                                   error-callback)
                                         error-callback))))
#+end_src
